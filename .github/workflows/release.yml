name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - linux
          - macos

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"

jobs:
  # 运行测试
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd src-tauri && cargo fetch && cd ..

      - name: Run frontend tests
        run: pnpm test

      - name: Run Rust tests
        run: cd src-tauri && cargo test

      - name: Run Clippy
        run: cd src-tauri && cargo clippy -- -D warnings

      - name: Check formatting
        run: cd src-tauri && cargo fmt -- --check

  # 构建前端
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build:prod

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 1

  # 构建Windows版本
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: [test, build-frontend]
    if: github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd src-tauri && cargo fetch && cd ..

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Code signing (Windows)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 这里添加代码签名逻辑
          echo "Code signing for Windows"
        env:
          CODE_SIGN_CERT: ${{ secrets.CODE_SIGN_CERT }}
          CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGN_PASSWORD }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: src-tauri/target/release/bundle/msi/*.msi
          retention-days: 7

      - name: Generate checksums
        run: |
          cd src-tauri/target/release/bundle/msi
          Get-FileHash *.msi -Algorithm SHA256 | Out-File *.sha256

  # 构建Linux版本
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    if: github.event.inputs.platform == 'linux' || github.event.inputs.platform == 'all' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd src-tauri && cargo fetch && cd ..

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 7

      - name: Generate checksums
        run: |
          cd src-tauri/target/release/bundle
          find . -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" | xargs -I {} sh -c 'sha256sum {} > {}.sha256'

  # 构建macOS版本
  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: [test, build-frontend]
    if: github.event.inputs.platform == 'macos' || github.event.inputs.platform == 'all' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd src-tauri && cargo fetch && cd ..

      - name: Build Tauri app
        run: pnpm tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Code signing (macOS)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 这里添加代码签名逻辑
          echo "Code signing for macOS"
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: src-tauri/target/release/bundle/dmg/*.dmg
          retention-days: 7

      - name: Generate checksums
        run: |
          cd src-tauri/target/release/bundle/dmg
          shasum -a 256 *.dmg > *.dmg.sha256

  # 创建发布
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate release notes
        run: |
          echo "# C-drive空间管理器 ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## 下载链接" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Windows
          if [ -d "artifacts/windows-installer" ]; then
            echo "### Windows" >> RELEASE_NOTES.md
            ls -la artifacts/windows-installer/ >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
          
          # Linux
          if [ -d "artifacts/linux-installer" ]; then
            echo "### Linux" >> RELEASE_NOTES.md
            ls -la artifacts/linux-installer/ >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
          
          # macOS
          if [ -d "artifacts/macos-installer" ]; then
            echo "### macOS" >> RELEASE_NOTES.md
            ls -la artifacts/macos-installer/ >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: C-drive空间管理器 ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: |
            artifacts/windows-installer/*
            artifacts/linux-installer/*
            artifacts/macos-installer/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署到服务器
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Deploy to release server
        run: |
          # 这里添加部署逻辑
          echo "Deploying to release server"
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

  # 清理 artifacts
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [create-release, deploy]
    if: always()
    
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            frontend-dist
            windows-installer
            linux-installer
            macos-installer